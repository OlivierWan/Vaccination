// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vaccination.Infrastructure.Context;

#nullable disable

namespace Vaccination.Infrastructure.Migrations
{
    [DbContext(typeof(VaccinationContext))]
    partial class VaccinationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9208a9e6-51fb-4f97-8ade-de0edf8a1da6",
                            ConcurrencyStamp = "e8e00f24-236c-4f6a-af70-eae3b67a5ad9",
                            Name = "USER",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "93678cd4-0a06-4d1e-a42b-61454d92fbac",
                            ConcurrencyStamp = "5cecb024-da7d-45a7-82d6-0b2463843362",
                            Name = "OWNER",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "143a221a-2256-4130-a4b9-90afc20abc98",
                            ConcurrencyStamp = "e2bd239a-ef11-4436-abc3-88a93d04401e",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5baa1ca4-327b-4da1-8d95-f578c71d4a3d",
                            ConcurrencyStamp = "f3e5de56-d158-4e0a-afbd-083e450b87ad",
                            Name = "READ",
                            NormalizedName = "READ"
                        },
                        new
                        {
                            Id = "8a362b86-e96f-4f83-95ff-1cc743c332d5",
                            ConcurrencyStamp = "028d602d-b6ed-49fd-a063-0a3e5ab7c202",
                            Name = "WRITE",
                            NormalizedName = "WRITE"
                        },
                        new
                        {
                            Id = "e6a619e2-21e6-4db2-998c-89d20ceef4c2",
                            ConcurrencyStamp = "c92766b2-31c0-4da6-9afc-330a90b73cb1",
                            Name = "DELETE",
                            NormalizedName = "DELETE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vaccination.Domain.Entities.CalendarVaccination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("MonthAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthDelay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CalendarVaccinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67d97ad7-b78e-410b-9eb2-c55afb637b0d"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOnUtc = new DateTime(2024, 10, 1, 15, 25, 28, 345, DateTimeKind.Utc).AddTicks(7957),
                            Description = "administration d’un traitement\r\npréventif (produit d’immunisation passive) qui protège contre la\r\nbronchiolite, de préférence avant la sortie de la maternité, en période\r\nde haute circulation du virus, de septembre à février.",
                            IsDeleted = false,
                            MonthAge = 0,
                            MonthDelay = 6,
                            Name = "RSV (virus respiratoire syncytial)"
                        },
                        new
                        {
                            Id = new Guid("237fc3a7-b764-41fc-a7c9-7e8f17a06205"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOnUtc = new DateTime(2024, 10, 1, 15, 25, 28, 345, DateTimeKind.Utc).AddTicks(7963),
                            Description = "protège\r\ncontre :\r\n- la diphtérie,\r\n- le tétanos,\r\n- la coqueluche,\r\n- les infections invasives à Haemophilus Influenzae de type b\r\n(méningite, épiglottite et arthrite),\r\n- la poliomyélite,\r\n- l’hépatite B.\r\nRotavirus (1ère dose) : vaccination contre la gastro-entérite à rotavirus.\r\nPneumocoques (1ère dose) : vaccination contre les infections\r\ninvasives à pneumocoques.",
                            IsDeleted = false,
                            MonthAge = 2,
                            MonthDelay = 0,
                            Name = "1ère dose du vaccin combiné (D, T, aP, Hib, IPV, Hep B)"
                        },
                        new
                        {
                            Id = new Guid("0875b475-c6b2-439b-9c26-1417532993ce"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOnUtc = new DateTime(2024, 10, 1, 15, 25, 28, 345, DateTimeKind.Utc).AddTicks(7965),
                            Description = "vaccination contre la gastro-entérite à\r\nrotavirus.\r\nMéningocoque B (1ère dose) : vaccination contre les infections\r\ninvasives à méningocoque B.",
                            IsDeleted = false,
                            MonthAge = 3,
                            MonthDelay = 0,
                            Name = "Rotavirus (2ème dose)"
                        },
                        new
                        {
                            Id = new Guid("722370b2-0761-4d7c-85d1-1f8862eb4c13"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOnUtc = new DateTime(2024, 10, 1, 15, 25, 28, 345, DateTimeKind.Utc).AddTicks(7967),
                            Description = "2ème dose du vaccin combiné (D, T, aP, Hib, IPV, Hep B) qui\r\nprotège contre :\r\n- la diphtérie,\r\n- le tétanos,\r\n- la coqueluche,\r\n- les infections invasives à Haemophilus Influenzae de type b\r\n(méningite, épiglottite et arthrite),\r\n- la poliomyélite,\r\n- l’hépatite B.\r\nPneumocoques (2ème dose) : vaccination contre les infections\r\ninvasives à pneumocoques.\r\nRotavirus (3ème dose) : vaccination contre la gastro-entérite à\r\nrotavirus.",
                            IsDeleted = false,
                            MonthAge = 4,
                            MonthDelay = 0,
                            Name = "2ème dose du vaccin combiné (D, T, aP, Hib, IPV, Hep B)"
                        },
                        new
                        {
                            Id = new Guid("bb298758-3b3a-4e84-8c7a-5073028fd6a5"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOnUtc = new DateTime(2024, 10, 1, 15, 25, 28, 345, DateTimeKind.Utc).AddTicks(7969),
                            Description = "vaccination contre les infections\r\ninvasives à méningocoque B.",
                            IsDeleted = false,
                            MonthAge = 5,
                            MonthDelay = 0,
                            Name = "Méningocoque B (2ème dose)"
                        },
                        new
                        {
                            Id = new Guid("3fde4331-77a3-4e9b-b5c6-f3e60d432505"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOnUtc = new DateTime(2024, 10, 1, 15, 25, 28, 345, DateTimeKind.Utc).AddTicks(7970),
                            Description = "protège contre :\r\n- la diphtérie,\r\n- le tétanos,\r\n- la coqueluche,\r\n- les infections invasives à Haemophilus Influenzae de type b\r\n(méningite, épiglottite et arthrite),\r\n- la poliomyélite,\r\n- l’hépatite B.\r\nPneumocoques (3ème dose) : vaccination contre les infections\r\ninvasives à pneumocoques.",
                            IsDeleted = false,
                            MonthAge = 11,
                            MonthDelay = 0,
                            Name = "3ème dose du vaccin combiné (D, T, aP, Hib, IPV, Hep B)"
                        },
                        new
                        {
                            Id = new Guid("58f86995-e641-4f8c-8a1c-44fa05b8c878"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOnUtc = new DateTime(2024, 10, 1, 15, 25, 28, 345, DateTimeKind.Utc).AddTicks(7974),
                            Description = "protège contre :\r\n- la rougeole,\r\n- les oreillons,\r\n- la rubéole,\r\n- la varicelle.\r\nMéningocoque B (3ème dose) : vaccination contre les infections\r\ninvasives à méningocoque B.",
                            IsDeleted = false,
                            MonthAge = 12,
                            MonthDelay = 0,
                            Name = "1ère dose du vaccin combiné (RORV)"
                        },
                        new
                        {
                            Id = new Guid("e6353ef3-c358-47e8-b51b-52b1af9b99b4"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedOnUtc = new DateTime(2024, 10, 1, 15, 25, 28, 345, DateTimeKind.Utc).AddTicks(7976),
                            Description = "vaccination contre les infections\r\ninvasives à méningocoques A, C, W et Y",
                            IsDeleted = false,
                            MonthAge = 13,
                            MonthDelay = 0,
                            Name = "Méningocoques ACWY (1ère dose)"
                        });
                });

            modelBuilder.Entity("Vaccination.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Vaccination.Domain.Entities.UserVaccination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("VaccinationDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VaccineCalendarId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccineCalendarId")
                        .IsUnique();

                    b.ToTable("UserVaccinations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vaccination.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vaccination.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vaccination.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vaccination.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vaccination.Domain.Entities.UserVaccination", b =>
                {
                    b.HasOne("Vaccination.Domain.Entities.User", "User")
                        .WithMany("UserVaccinations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vaccination.Domain.Entities.CalendarVaccination", "VaccineCalendar")
                        .WithOne()
                        .HasForeignKey("Vaccination.Domain.Entities.UserVaccination", "VaccineCalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VaccineCalendar");
                });

            modelBuilder.Entity("Vaccination.Domain.Entities.User", b =>
                {
                    b.Navigation("UserVaccinations");
                });
#pragma warning restore 612, 618
        }
    }
}
